`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/15/2020 02:56:01 PM
// Design Name: 
// Module Name: alu
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module alu(a,b,out,opcode,neg,zero);
	input [31:0] a; //first value 
	input [31:0] b; //second value
	input [3:0] opcode; //operation number 
	output reg [31:0] out;
    
    output reg neg; 
    output reg zero;
    
	always@(a,b,opcode)
	begin 
		if(opcode==4'b0000) //add a,b
			out=a+b;
		else if(opcode==4'b0001) //increment a
			out=a+1;
		else if(opcode==4'b0010) //negate a, using ~
			out=(~a)+1;
		else if(opcode==4'b0011) //subtract a-b
			out=a+(~b+1);
		else if(opcode==4'b0100)//pass a
			out=a;
	end
	 
	
	always@(out)//determine zero and negative flags
	begin
	   zero=0; //value NOT zero
	   if(out==0)
	       zero=1;
	   
	   neg=0; //value NOT negative
	   if(out[31]==1) //the sign bit is a 1=negative
	       neg=1;
	       
	end 
	
endmodule 